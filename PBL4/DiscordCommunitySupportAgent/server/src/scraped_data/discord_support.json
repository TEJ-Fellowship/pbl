[
  {
    "title": "Help Center",
    "content": "(function() { var searchForm = document.querySelector('.search-kb-fix'); var hiddenInput = document.createElement('input'); hiddenInput.setAttribute(\"type\", \"hidden\"); hiddenInput.setAttribute(\"name\", \"filter_by\"); hiddenInput.setAttribute(\"value\", \"knowledge_base\"); searchForm.appendChild(hiddenInput); })() Need help? We've got your back. From account settings to permissions, find help for everything Discord If you're new to Discord and looking for tips, check out our Beginner's Guide Announcements We've got our ear to the ground. Here's what you need to know. Discord Basics Start off on the right foot! Not the left one! Account Settings Personalize your profile, security, notifications, and more. Server Settings Almost as exciting as interior decorating. Nitro, Shop & Server Boosting Please don't shop until you drop. Let us help. Quests & Promotions Welcome, weary traveler! Would you like to see our quests? Payments & Billing That feel when you look at your bank account. Safety, Privacy & Policy Keep things safe & sound for you and your buddies. Known Issues, Bugs & Troubleshooting All you can eat self-serve problem solving. Other ways to find help Developer  Your home for support with developing bots, apps, & games using our API and SDK! Apps Center Read all about how you can use, discover, and add Apps as a Discord user! X Have a quick question? Hit us up on X!",
    "url": "https://support.discord.com/",
    "type": "support-center",
    "pageName": "Discord Support Center",
    "scrapedAt": "2025-10-11T14:31:16.455Z"
  },
  {
    "title": "Beginner's Guide to Discord",
    "content": "Welcome to the comprehensive beginner's guide to Discord! What this article covers: What is Discord? Account Setup and Troubleshooting What is a Discord Server? What are Text and Voice Channels? How to Share your Screen Additional Discord Features Account Connections How to Customize your Discord User Profile What is Discord? Discord is a communication platform that allows users to interact through text, voice, and video. Users can join or create their own communities, which can be organized around various topics, interests, or gaming groups. Check out our Video Tutorials to learn even more about Discord. Account Setup and Troubleshooting You can register a Discord account through the desktop app, your mobile device, or through a browser. You can learn more about registering a Discord account, or about any possible registration errors, by checking out these articles: Discord Sign-Up and Registration Guide: Need help signing up and registering for a Discord account? Check out this full guide to help you through the process. How to Verify Your Discord Account: Having trouble verifying your account? Check out this guide for more detailed information on account verification. Discord  & Email Troubleshooting Guide: Having trouble logging in or registering a Discord account? Please check out this guide for additional help. What is a Discord Server? Discord servers provide you with the ability to create private, invite-only spaces for your friends or community—places where you can connect, collaborate, and enjoy meaningful conversations together. These dedicated spaces are what we call servers. You can join existing servers or create your own for virtually any type of community or interest group. Whether you're organizing a book club 📚, coordinating with classmates in a study group 🖊️, managing a dance class 💃, or simply staying connected with close friends, Discord servers offer the perfect platform to bring people together around shared interests and activities. Example of a Discord server You can learn more about Discord Servers by checking out these articles: Discord Server Setup Guide: Learn more about how to set up your own Discord server. Setting Up Permissions FAQ: Learn more about how to set up Server Permissions to manage and moderate your server members. How do I set up a Role-Exclusive channel?: Need to set up role-exclusive channels for your server? Learn how in this article! Notifications Settings 101: Learn everything you need to know and more about your notification settings. Server Boosting FAQ: Learn more about Server Boosting and Additional Perks you can have for your server. Custom Emojis: Learn how to upload custom emojis to your server or other servers you’re a part of. Polls FAQ: If enabled on the server, you can share and vote in polls. What are Text and Voice Channels? Your server is made up of text channels and voice channels. This allows you to communicate with the other members of the server. Text Channels Text channels provide dedicated spaces for written conversations, helping to keep discussions organized and ensuring everyone has room to participate. You can create individual channels for each topic your group enjoys discussing—whether that's planning fishing trips, sharing cooking tips, or any other shared interests. Example of what a Text Channel is in a Discord server Voice Channels Voice channels allow you to connect with others through voice and video chat. Simply click on a voice channel to join—no calling or ringing necessary. Other members of your server can see when you're in a voice channel and easily drop in to chat, say hello on video, or share their screen with the group. Example of what a Voice Channel is in a Discord server You can learn more about text and voice channels below. Text Channels & Text Chat In Voice Channels: Learn more about setting up, editing, and managing text channels. Voice Channels FAQs: Learn more about setting up, editing, and managing voice channels. How to Share your Screen You can share your screen or gameplay while connected to a voice channel, a direct message (DM), or group DM. Example of what it looks like when someone is streaming on Discord You can learn more about screen sharing by checking out the Go Live and Screen Share  article. Additional Discord Features Account Connections You can connect a variety of outside apps like PlayStation, Spotify, and Xbox to your Discord account. This allows for your User Profile not only to display various information, but also what song you’re currently listening to on Spotify. To learn more about how to connect an account to your Discord account check out this  article. You can learn more about individual account connection options through the Connections  category. How to Customize Your Discord User Profile There are multiple ways to customize your user profile, from changing your avatar, to rocking a profile effect, and more. Please check out one of the articles below to learn more about how to personalize your Discord profile. Custom Profiles: Learn how to customize your Discord User Profile. From changing your avatar, to your “about me” section, and more. Custom Status: Learn how to set a Custom Status on Discord. Avatar Decorations: Learn more about Avatar Decorations, whether it’s how to set one or purchase one from the shop. Profile Badges 101: Learn about all of the profile badges that are currently available. Profile Effects: Learn more about Profile Effects, whether it’s how to set one or purchase one from the shop. Per-server Profile: Are you a Nitro subscriber? Learn how to set a custom per-server profile. Contact Us: Have any additional questions or just something you are not sure of? Please reach out to our  team through here: dis.gd/contact",
    "url": "https://support.discord.com/hc/en-us/articles/360045138571",
    "type": "support",
    "pageName": "Server Setup Guide",
    "scrapedAt": "2025-10-11T14:31:18.878Z"
  },
  {
    "title": "Setting Up Permissions FAQ",
    "content": "One of the great things about creating communities on Discord is our permission system! In this  article, you'll learn more about permissions, how to create and customize permissions based on roles, and the difference between server, category, and channel permissions. What does this article cover? What are permissions? How to Set Up Server Permissions Step 1 - Create a role Step 2 - Customize the role Step 3 - Assign the role Understanding Category and Channel Permissions How to Set Up Channel Permissions How to Set Up Category Permissions Understanding Synced and Not-Synced Permissions Learn more about how to use permissions What are permissions? Permissions allow users to have specific privileges and functions in their server. Some permissions can be as basic as allowing users the ability to add reactions to messages while other permissions grant users more administrative actions. These permissions are based on the roles assigned to users in a server and permissions can be assigned per role on both the server level and channel level. How to Set Up Server Permissions Step 1 - Create roles Your journey to setting up permissions in your server begins with you creating roles! When you first create your server there is only one pre-made role: @everyone. The @everyone role defines the permissions that are enabled for everyone on your server even if they have no other roles assigned to them. Note: As the creator of your server you don't need to assign any roles or permissions to yourself. You will always have access to everything. Press on the downward arrow next to the server name. Choose Server Settings > Roles > Create Role. Step 2 - Customize role and permissions Give the new role a name. You can always change this later! Feel free to change the display of this role at this point, but for this article, we'll focus on Permissions. Select on the Permissions tab of the new role you just created to see the list of server Permissions you can assign under this role. Make sure to consider what you want users in this role to do in your server when choosing permissions. Don't forget to Save the changes you're making to this role! Step 3 - Assign the role Finally, once you've configured the role's permission, you can assign the role to members of your server. Select the Manage Members tab for the list of server members and pick the user you want to assign the role to. Or you can press on a user's avatar in the server then select the plus sign under the role section to select a role from the pop-up window Now this user has the server-wide permissions that you assigned to that role. Understanding Channel and Category Permissions How to Set Up Channel Permissions Now that you've set up roles with server permissions, it's important to understand channel permissions. Like server permissions, channel permissions allow specific users on how they can interact with a specific channel. Here's how to set up channel permissions. Note: Channel permissions will override server permissions. You can adjust permissions of specific channels, both text and voice, through the channel settings menu by hovering over a channel and clicking on the cog icon. Select the Permissions tab on the left-hand side. By default @everyone has access to all features of a channel. You can allow or deny the permissions everyone has on this particular channel by clicking the check boxes. You can add roles or specific people whom you want to manage channel permissions for by clicking the plus sign. Once you have added a Role or member you can begin assigning channel permissions to this group or person. How to Set Up Category Permissions In your server, you're also capable of adjusting Category permissions so that the channels under a category can all have the same permissions. Here's how you can set up Category permissions. Right-click the category and choose Edit Category. Select Permissions in the left-hand panel to alter permissions and add roles. Understanding Synced and Not-Synced Permissions There are two default states for a channel in regards to category permissions: synced and not-synced. A synced channel will have permissions that completely match that of the category. A not-synced channel will have permissions that differ from the permissions set for the category. A synced channel! A not synced channel! If you change the permissions on a category, all channels that are synced will automatically update. If you do not sync permissions when moving a channel between categories, or if you change an individual permission on the channel level, it will then show that the channel is not synced with the category. This means the channel currently does not share the same permissions as the category and will not automatically update when you make changes to the category's permissions. If you want a not-synced channel to sync with its category again, here's how you can do it: Right-click on the not-synced channel and choose Edit Channel from the drop-down menu. Press the Permissions option in the left-hand panel. Press the Sync Now button and the channel's permission will match the permissions of the category. Note: Synced and not-synced channels can coexist within a category. Changing a category’s permissions will change all synced channel’s permissions, but not the permissions of any not-synced channel! One final note on category permissions - if you don't want to utilize them at all, you can leave all channels within the category as \"not synced\" and manage them individually. Permissions can also be managed on a per-channel basis. Learn more about how to use permissions You can check out step-by-step instructions for the following popular permission settings: How do I set up a private server? How do I set up a leaders channel? How do I set up an announcements channel? How is the permission hierarchy structured?",
    "url": "https://support.discord.com/hc/en-us/articles/206029707",
    "type": "support",
    "pageName": "Roles & Permissions",
    "scrapedAt": "2025-10-11T14:31:21.512Z"
  },
  {
    "title": "oops",
    "content": "oops The page you were looking for doesn't exist You may have mistyped the address or the page may have moved Take me back to the home page",
    "url": "https://support.discord.com/hc/en-us/sections/360008589993-Moderation",
    "type": "support-section",
    "pageName": "Moderation Tools",
    "scrapedAt": "2025-10-11T14:31:24.428Z"
  },
  {
    "title": "Intro to Webhooks",
    "content": "Discord's built in Webhooks function as an easy way to get automated messages and data updates sent to a text channel in your server. Think of them as one of those fancy pneumatic tube things you used to love sending money into at a bank and watch disappear, but instead of never seeing your money again, you're actually sending messages into Discord from another platform. By creating a webhook endpoint in your server, you'll generate a Webhook URL that you can drop into a number of different other services to link the two. While everyone absolutely loves pneumatic tubes (100% true), it's important to note that webhooks require another website to use (though programming-inclined users can make their own tube schoomper themselves). Some services and websites are built to easily incorporate webhooks and send messages outwards, but some aren't. Here's a little handy reference list: Can use webhooks: Can't really use webhooks: GitHub Twitch / YouTube CircleCI Nelly The Hamster DataDog Facebook Making a Webhook With that in mind, if you want to update your Discord server with GitHub commits and pull requests or track analytics from DataDog or anything similar, here's how! Open your Server Settings and head into the Integrations tab: Click the \"Create Webhook\" button to create a new webhook! You'll have a few options here. You can: Edit the avatar: By clicking the avatar next to the Name in the top left Choose what channel the Webhook posts to: By selecting the desired text channel in the dropdown menu. Name your Webhook: Good for distinguishing multiple webhooks for multiple different services. You now have your own handy URL / pneumatic tube schoomp-er that you can link to more websites to receive messages from. Quick Example: GitHub Webhook Integration Since webhooks can't really function on their own and need to be linked to another website to function as intended, I figured it'd be best to include a sample integration for any of you GitHub enthusiasts and code-pushers. You can use Discord's webhooks to send any code merge or push updates in a repository of yours into a text channel in your server. 1. Get the webhook URL for the server/channel you want to receive messages: In my server, I've created a text channel labeled #general-chat and I want my repo updates to post messages here! Therefore, I'll grab the webhook URL for this channel by pressing the Copy Webhook URL button: 2. Add the webhook URL into your GitHub repo settings Choose the repository that you'd like to get updates from in your Discord server. Once you've selected the repo, go into the Settings > Webhooks menu And then click the \"Add webhook\" button, and enter the Discord-generated URL in the \"Payload URL\" blank. To make the webhook display messages properly, it's really really really REALLY really important that you append '/github' at the end of it. Yes, like five-reallys important. In addition to the URL, you have some more GitHub-specific options to choose from. For content type, stick with application/json. Discord's webhook format really likes JSON. In the next section, you can choose to customize what kind of events trigger webhook messages. Click the last \"Add webhook\" button beneath the event notifications customization option, and you're all set! Pushing any updates in the repo (including editing the readme file) will show up in your text channel: And you're all set! GitHub is just one example of an integration that can post messages via webhook. If you've got a knack for JSON application-building or HTTP POST requests and want to customize your own webhooks, you can dig up some more information in our developer docs.",
    "url": "https://support.discord.com/hc/en-us/articles/228383668",
    "type": "support",
    "pageName": "Bot Integration",
    "scrapedAt": "2025-10-11T14:31:26.745Z"
  },
  {
    "title": "Intro | Documentation | Discord Developer Portal",
    "content": "Build Where the World PlaysCreate social games, experiences, and integrations for millions of users on Discord Build with Discord Discord provides a platform for building social experiences, whether you're creating apps within Discord or integrating Discord's features into your game. AppsDevelop apps, bots, and integrations to enhance the Discord experience.ActivitiesBuild multiplayer games and social experiences that run directly in Discord.Discord Social SDKAdd rich social features into your game across desktop, mobile, and console. Apps: Extend Discord with Custom Integrations Enhance the Discord experience with custom apps, commands, and integrations. Apps OverviewLearn the fundamentals of building Discord apps and commands.Build Your First Discord AppCreate a bot user that plays \"rock, paper, scissors\" with users.Slash Commands and InteractionsCreate custom commands and interactions for your app. Activities: Build Multiplayer Games in Discord Use the Embedded App SDK to create real-time games and social experiences that users can launch directly inside Discord. Activities OverviewDiscover how Activities work in Discord.Build Your First ActivityBuild and test an Activity using the Embedded App SDK.Activity Design PatternsBest practices for multiplayer, game design, and player experience. Discord Social SDK: Bring Social Features to Your Game Enable rich presence, voice chat, and more to create a seamless social experience for your players and grow your game. Discord Social SDK OverviewExplore rich presence, relationships, voice chat, and more.Build with the Discord Social SDKStart here for a step-by-step guide to adding social features to your game.Design GuidelinesBest practices for integrating Discord Social SDK features into your game. Find  Connect with the developer community, report issues, and stay updated with API changes. Join the Developer DiscordGet support, API announcements, and participate in developer events.Report Issues on GitHubSubmit API bugs, feature requests, or contribute to the documentation.Visit the Developer Find articles, FAQs, and reach out to Discord's developer support team.",
    "url": "https://discord.com/developers/docs/",
    "type": "developer",
    "pageName": "Discord Developer Docs",
    "scrapedAt": "2025-10-11T14:31:30.070Z"
  },
  {
    "title": "Webhook Resource",
    "content": "Webhook ResourceOn this pageCreate WebhookGet Channel WebhooksGet Guild WebhooksGet WebhookGet Webhook with TokenModify WebhookModify Webhook with TokenDelete WebhookDelete Webhook with TokenExecute WebhookExecute Slack-Compatible WebhookExecute GitHub-Compatible WebhookGet Webhook MessageEdit Webhook MessageDelete Webhook Message Webhooks are a low-effort way to post messages to channels in Discord. They do not require a bot user or authentication to use. Apps can also subscribe to webhook events (i.e. outgoing webhooks) when events happen in Discord, which is detailed in the Webhook Events documentation. Webhook Object Used to represent a webhook. Webhook Structure FieldTypeDescriptionidsnowflakethe id of the webhooktypeintegerthe type of the webhookguild_id??snowflakethe guild id this webhook is for, if anychannel_id?snowflakethe channel id this webhook is for, if anyuser?user objectthe user this webhook was created by (not returned when getting a webhook with its token)name?stringthe default name of the webhookavatar?stringthe default user avatar hash of the webhooktoken?stringthe secure token of the webhook (returned for Incoming Webhooks)application_id?snowflakethe bot/OAuth2 application that created this webhooksource_guild? *partial guild objectthe guild of the channel that this webhook is following (returned for Channel Follower Webhooks)source_channel? *partial channel objectthe channel that this webhook is following (returned for Channel Follower Webhooks)url?stringthe url used for executing the webhook (returned by the webhooks OAuth2 flow) * These fields will be absent if the webhook creator has since lost access to the guild where the followed channel resides Webhook Types These types don't include webhook events, which are outgoing webhooks sent to your app by Discord. See Webhook Events for details. ValueNameDescription1IncomingIncoming Webhooks can post messages to channels with a generated token2Channel FollowerChannel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels3ApplicationApplication webhooks are webhooks used with Interactions Example Incoming Webhook Copy{ \"name\": \"test webhook\", \"type\": 1, \"channel_id\": \"199737254929760256\", \"token\": \"3d89bb7572e0fb30d8128367b3b1b44fecd1726de135cbe28a41f8b2f777c372ba2939e72279b94526ff5d1bd4358d65cf11\", \"avatar\": null, \"guild_id\": \"199737254929760256\", \"id\": \"223704706495545344\", \"application_id\": null, \"user\": { \"username\": \"test\", \"discriminator\": \"7479\", \"id\": \"190320984123768832\", \"avatar\": \"b004ec1740a63ca06ae2e14c5cee11f3\", \"public_flags\": 131328 } } Example Channel Follower Webhook Copy{ \"type\": 2, \"id\": \"752831914402115456\", \"name\": \"Guildy name\", \"avatar\": \"bb71f469c158984e265093a81b3397fb\", \"channel_id\": \"561885260615255432\", \"guild_id\": \"56188498421443265\", \"application_id\": null, \"source_guild\": { \"id\": \"56188498421476534\", \"name\": \"Guildy name\", \"icon\": \"bb71f469c158984e265093a81b3397fb\" }, \"source_channel\": { \"id\": \"5618852344134324\", \"name\": \"announcements\" }, \"user\": { \"username\": \"test\", \"discriminator\": \"7479\", \"id\": \"190320984123768832\", \"avatar\": \"b004ec1740a63ca06ae2e14c5cee11f3\", \"public_flags\": 131328 } } Example Application Webhook Copy{ \"type\": 3, \"id\": \"658822586720976555\", \"name\": \"Clyde\", \"avatar\": \"689161dc90ac261d00f1608694ac6bfd\", \"channel_id\": null, \"guild_id\": null, \"application_id\": \"658822586720976555\" } Create Webhook POST/channels/{channel.id}/webhooks Creates a new webhook and returns a webhook object on success. Requires the MANAGE_WEBHOOKS permission. Fires a Webhooks Update Gateway event. An error will be returned if a webhook name (name) is not valid. A webhook name is valid if: It does not contain the substrings clyde or discord (case-insensitive) It follows the nickname guidelines in the Usernames and Nicknames documentation, with an exception that webhook names can be up to 80 characters This endpoint supports the X-Audit-Log-Reason header. JSON Params FieldTypeDescriptionnamestringname of the webhook (1-80 characters)avatar??image dataimage for the default webhook avatar Get Channel Webhooks GET/channels/{channel.id}/webhooks Returns a list of channel webhook objects. Requires the MANAGE_WEBHOOKS permission. Get Guild Webhooks GET/guilds/{guild.id}/webhooks Returns a list of guild webhook objects. Requires the MANAGE_WEBHOOKS permission. Get Webhook GET/webhooks/{webhook.id} Returns the new webhook object for the given id. This request requires the MANAGE_WEBHOOKS permission unless the application making the request owns the webhook. (see: webhook.application_id) Get Webhook with Token GET/webhooks/{webhook.id}/{webhook.token} Same as above, except this call does not require authentication and returns no user in the webhook object. Modify Webhook PATCH/webhooks/{webhook.id} Modify a webhook. Requires the MANAGE_WEBHOOKS permission. Returns the updated webhook object on success. Fires a Webhooks Update Gateway event. All parameters to this endpoint are optional This endpoint supports the X-Audit-Log-Reason header. JSON Params FieldTypeDescriptionnamestringthe default name of the webhookavatar?image dataimage for the default webhook avatarchannel_idsnowflakethe new channel id this webhook should be moved to Modify Webhook with Token PATCH/webhooks/{webhook.id}/{webhook.token} Same as above, except this call does not require authentication, does not accept a channel_id parameter in the body, and does not return a user in the webhook object. Delete Webhook DELETE/webhooks/{webhook.id} Delete a webhook permanently. Requires the MANAGE_WEBHOOKS permission. Returns a 204 No Content response on success. Fires a Webhooks Update Gateway event. This endpoint supports the X-Audit-Log-Reason header. Delete Webhook with Token DELETE/webhooks/{webhook.id}/{webhook.token} Same as above, except this call does not require authentication. Execute Webhook POST/webhooks/{webhook.id}/{webhook.token} Refer to Uploading Files for details on attachments and multipart/form-data requests. Returns a message or 204 No Content depending on the wait query parameter. Note that when sending a message, you must provide a value for at least one of content, embeds, components, file, or poll. If the webhook channel is a forum or media channel, you must provide either thread_id in the query string params, or thread_name in the JSON/form params. If thread_id is provided, the message will send in that thread. If thread_name is provided, a thread with that name will be created in the channel. Discord may strip certain characters from message content, like invalid unicode characters or characters which cause unexpected message formatting. If you are passing user-generated strings into message content, consider sanitizing the data to prevent unexpected behavior and using allowed_mentions to prevent unexpected mentions. Query String Params FieldTypeDescriptionRequiredwaitbooleanwaits for server confirmation of message send before response, and returns the created message body (defaults to false; when false a message that is not saved does not return an error)falsethread_idsnowflakeSend a message to the specified thread within a webhook's channel. The thread will automatically be unarchived.falsewith_componentsbooleanwhether to respect the components field of the request. When enabled, allows application-owned webhooks to use all components and non-owned webhooks to use non-interactive components. (defaults to false)false JSON/Form Params FieldTypeDescriptionRequiredcontentstringthe message contents (up to 2000 characters)one of content, file, embeds, pollusernamestringoverride the default username of the webhookfalseavatar_urlstringoverride the default avatar of the webhookfalsettsbooleantrue if this is a TTS messagefalseembedsarray of up to 10 embed objectsembedded rich contentone of content, file, embeds, pollallowed_mentionsallowed mention objectallowed mentions for the messagefalsecomponents *array of message componentthe components to include with the messagefalsefiles[n] **file contentsthe contents of the file being sentone of content, file, embeds, pollpayload_json **stringJSON encoded body of non-file paramsmultipart/form-data onlyattachments **array of partial attachment objectsattachment objects with filename and descriptionfalseflags ***integermessage flags combined as a bitfield (only SUPPRESS_EMBEDS, SUPPRESS_NOTIFICATIONS and IS_COMPONENTS_V2 can be set)falsethread_namestringname of thread to create (requires the webhook channel to be a forum or media channel)falseapplied_tagsarray of snowflakesarray of tag ids to apply to the thread (requires the webhook channel to be a forum or media channel)falsepollpoll request objectA poll!one of content, file, embeds, poll * Application-owned webhooks can always send components. Non-application-owned webhooks cannot send interactive components, and the components field will be ignored unless they set the with_components query param. ** See Uploading Files for details. *** When the flag IS_COMPONENTS_V2 is set, the webhook message can only contain components. Providing content, embeds, files[n] or poll will fail with a 400 BAD REQUEST response. For the webhook embed objects, you can set every field except type (it will be rich regardless of if you try to set it), provider, video, and any height, width, or proxy_url values for images. Execute Slack-Compatible Webhook POST/webhooks/{webhook.id}/{webhook.token}/slack Refer to Slack's documentation for more information. We do not support Slack's channel, icon_emoji, mrkdwn, or mrkdwn_in properties. Query String Params FieldTypeDescriptionRequiredthread_idsnowflakeid of the thread to send the message infalsewaitbooleanwaits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)false Execute GitHub-Compatible Webhook POST/webhooks/{webhook.id}/{webhook.token}/github Add a new webhook to your GitHub repo (in the repo's settings), and use this endpoint as the \"Payload URL.\" You can choose what events your Discord channel receives by choosing the \"Let me select individual events\" option and selecting individual events for the new webhook you're configuring. The supported events are commit_comment, create, delete, fork, issue_comment, issues, member, public, pull_request, pull_request_review, pull_request_review_comment, push, release, watch, check_run, check_suite, discussion, and discussion_comment. Query String Params FieldTypeDescriptionRequiredthread_idsnowflakeid of the thread to send the message infalsewaitbooleanwaits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)false Get Webhook Message GET/webhooks/{webhook.id}/{webhook.token}/messages/{message.id} Returns a previously-sent webhook message from the same token. Returns a message object on success. Query String Params FieldTypeDescriptionRequiredthread_idsnowflakeid of the thread the message is infalse Edit Webhook Message PATCH/webhooks/{webhook.id}/{webhook.token}/messages/{message.id} Edits a previously-sent webhook message from the same token. Returns a message object on success. When the content field is edited, the arrays mentions and mention_roles and the boolean mention_everyone in the message object will be reconstructed from scratch based on the new content. When the message flag IS_COMPONENTS_V2 is set, the reconstructed arrays and boolean are based on the edited content in the components array. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message. Refer to Uploading Files for details on attachments and multipart/form-data requests. Any provided files will be appended to the message. To remove or replace files you will have to supply the attachments field which specifies the files to retain on the message after edit. Starting with API v10, the attachments array must contain all attachments that should be present after edit, including retained and new attachments provided in the request body. All parameters to this endpoint are optional and nullable. Query String Params FieldTypeDescriptionRequiredthread_idsnowflakeid of the thread the message is infalsewith_componentsbooleanwhether to respect the components field of the request. When enabled, allows application-owned webhooks to use all components and non-owned webhooks to use non-interactive components. (defaults to false)false JSON/Form Params FieldTypeDescriptioncontentstringthe message contents (up to 2000 characters)embedsarray of up to 10 embed objectsembedded rich contentflags *integermessage flags combined as a bitfield (SUPPRESS_EMBEDS and IS_COMPONENTS_V2 only)allowed_mentionsallowed mention objectallowed mentions for the messagecomponents **array of message componentthe components to include with the messagefiles[n] ***file contentsthe contents of the file being sent/editedpayload_json ***stringJSON encoded body of non-file params (multipart/form-data only)attachments ***array of partial attachment objectsattached files to keep and possible descriptions for new filespoll ****poll request objectA poll! * The SUPPRESS_EMBEDS flag can be both set and unset, while the IS_COMPONENTS_V2 flag can only be set. When the IS_COMPONENTS_V2 flag is set, any of the used content, embeds, files[n] or poll values in the initial message must be set to null first, otherwise it will fail with a 400 BAD REQUEST response. ** Application-owned webhooks can always send components. Non-application-owned webhooks cannot send interactive components, and the components field will be ignored unless they set the with_components query param. *** See Uploading Files for details. **** Polls can only be added when editing a deferred interaction response. Delete Webhook Message DELETE/webhooks/{webhook.id}/{webhook.token}/messages/{message.id} Deletes a message that was created by the webhook. Returns a 204 No Content response on success. Query String Params FieldTypeDescriptionRequiredthread_idsnowflakeid of the thread the message is infalse",
    "url": "https://discord.com/developers/docs/resources/webhook",
    "type": "developer",
    "pageName": "Webhooks Guide",
    "scrapedAt": "2025-10-11T14:31:32.874Z"
  },
  {
    "title": "OAuth2",
    "content": "OAuth2On this pageShared ResourcesState and SecurityAuthorization Code GrantImplicit GrantClient Credentials GrantBot UsersWebhooksGet Current Bot Application InformationGet Current Authorization Information OAuth2 enables application developers to build applications that utilize authentication and data from the Discord API. Within Discord, there are multiple types of OAuth2 authentication. We support the authorization code grant, the implicit grant, client credentials, and some modified special-for-Discord flows for Bots and Webhooks. Shared Resources The first step in implementing OAuth2 is registering a developer application and retrieving your client ID and client secret. Most people who will be implementing OAuth2 will want to find and utilize a library in the language of their choice. For those implementing OAuth2 from scratch, please see RFC 6749 for details. After you create your application with Discord, make sure that you have your client_id and client_secret handy. The next step is to figure out which OAuth2 flow is right for your purposes. OAuth2 URLs URLDescriptionhttps://discord.com/oauth2/authorizeBase authorization URLhttps://discord.com/api/oauth2/tokenToken URLhttps://discord.com/api/oauth2/token/revokeToken Revocation URL In accordance with the relevant RFCs, the token and token revocation URLs will only accept a content type of application/x-www-form-urlencoded. JSON content is not permitted and will return an error. OAuth2 Scopes These are a list of all the OAuth2 scopes that Discord supports. Some scopes require approval from Discord to use. Requesting them from a user without approval from Discord may cause errors or undocumented behavior in the OAuth2 flow. NameDescriptionactivities.readallows your app to fetch data from a user's \"Now Playing/Recently Played\" list — not currently available for appsactivities.writeallows your app to update a user's activity - not currently available for apps (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)applications.builds.readallows your app to read build data for a user's applicationsapplications.builds.uploadallows your app to upload/update builds for a user's applications - requires Discord approvalapplications.commandsallows your app to add commands to a guild - included by default with the bot scopeapplications.commands.updateallows your app to update its commands using a Bearer token - client credentials grant onlyapplications.commands.permissions.updateallows your app to update permissions for its commands in a guild a user has permissions toapplications.entitlementsallows your app to read entitlements for a user's applicationsapplications.store.updateallows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applicationsbotfor oauth2 bots, this puts the bot in the user's selected guild by defaultconnectionsallows /users/@me/connections to return linked third-party accountsdm_channels.readallows your app to see information about the user's DMs and group DMs - requires Discord approvalemailenables /users/@me to return an emailgdm.joinallows your app to join users to a group dmguildsallows /users/@me/guilds to return basic information about all of a user's guildsguilds.joinallows /guilds/{guild.id}/members/{user.id} to be used for joining users to a guildguilds.members.readallows /users/@me/guilds/{guild.id}/member to return a user's member information in a guildidentifyallows /users/@me without emailmessages.readfor local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates)relationships.readallows your app to know a user's friends and implicit relationships - requires Discord approvalrole_connections.writeallows your app to update a user's connection and metadata for the apprpcfor local rpc server access, this allows you to control a user's local Discord client - requires Discord approvalrpc.activities.writefor local rpc server access, this allows you to update a user's activity - requires Discord approvalrpc.notifications.readfor local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approvalrpc.voice.readfor local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approvalrpc.voice.writefor local rpc server access, this allows you to update a user's voice settings - requires Discord approvalvoiceallows your app to connect to voice on user's behalf and see all the voice members - requires Discord approvalwebhook.incomingthis generates a webhook that is returned in the oauth token response for authorization code grants In order to add a user to a guild, your bot has to already belong to that guild. role_connections.write cannot be used with the Implicit grant type. State and Security Before we dive into the semantics of the different OAuth2 grants, we should stop and discuss security, specifically the use of the state parameter. Cross-site request forgery, or CSRF, and Clickjacking are security vulnerabilities that must be addressed by individuals implementing OAuth. This is typically accomplished using the state parameter. state is sent in the authorization request and returned back in the response and should be a value that binds the user's request to their authenticated state. For example, state could be a hash of the user's session cookie, or some other nonce that can be linked to the user's session. When a user begins an authorization flow on the client, a state is generated that is unique to that user's request. This value is stored somewhere only accessible to the client and the user, i.e. protected by the same-origin policy. When the user is redirected, the state parameter is returned. The client validates the request by checking that the state returned matches the stored value. If they match, it is a valid authorization request. If they do not match, it's possible that someone intercepted the request or otherwise falsely authorized themselves to another user's resources, and the request should be denied. While Discord does not require the use of the state parameter, we support it and highly recommend that you implement it for the security of your own applications and data. Authorization Code Grant The authorization code grant is what most developers will recognize as \"standard OAuth2\" and involves retrieving an access code and exchanging it for a user's access token. It allows the authorization server to act as an intermediary between the client and the resource owner, so the resource owner's credentials are never shared directly with the client. All calls to the OAuth2 endpoints require either HTTP Basic authentication or client_id and client_secret supplied in the form data body. Authorization URL Example Copyhttps://discord.com/oauth2/authorize?response_type=code&client_id=157730590492196864&scope=identify%20guilds.join&state=15773059ghq9183habn&redirect_uri=https%3A%2F%2Fnicememe.website&prompt=consent&integration_type=0 client_id is your application's client_id. scope is a list of OAuth2 scopes separated by url encoded spaces (%20). redirect_uri is whatever URL you registered when creating your application, url-encoded. state is the unique string mentioned in State and Security. When someone navigates to this URL, they will be prompted to authorize your application for the requested scopes. On acceptance, they will be redirected to your redirect_uri, which will contain an additional querystring parameter, code. state will also be returned if previously sent, and should be validated at this point. prompt controls how the authorization flow handles existing authorizations. If a user has previously authorized your application with the requested scopes and prompt is set to consent, it will request them to reapprove their authorization. If set to none, it will skip the authorization screen and redirect them back to your redirect URI without requesting their authorization. For passthrough scopes, like bot and webhook.incoming, authorization is always required. The integration_type parameter specifies the installation context for the authorization. The installation context determines where the application will be installed, and is only relevant when scope contains applications.commands. When set to 0 (GUILD_INSTALL) the application will be authorized for installation to a server, and when set to 1 (USER_INSTALL) the application will be authorized for installation to a user. The application must be configured in the Developer Portal to support the provided integration_type. Redirect URL Example Copyhttps://nicememe.website/?code=NhhvTDYsFcdgNLnnLijcl7Ku7bEEeee&state=15773059ghq9183habn code is now exchanged for the user's access token by making a POST request to the token URL with the following parameters: grant_type - must be set to authorization_code code - the code from the querystring redirect_uri - the redirect_uri associated with this authorization, usually from your authorization URL Access Token Exchange Example Copyimport requests API_ENDPOINT = 'https://discord.com/api/v10' CLIENT_ID = '332269999912132097' CLIENT_SECRET = '937it3ow87i4ery69876wqire' REDIRECT_URI = 'https://nicememe.website' def exchange_code(code): data = { 'grant_type': 'authorization_code', 'code': code, 'redirect_uri': REDIRECT_URI } headers = { 'Content-Type': 'application/x-www-form-urlencoded' } r = requests.post('%s/oauth2/token' % API_ENDPOINT, data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET)) r.raise_for_status() return r.json() In response, you will receive: Access Token Response Copy{ \"access_token\": \"6qrZcUqja7812RVdnEKjpzOL4CvHBFG\", \"token_type\": \"Bearer\", \"expires_in\": 604800, \"refresh_token\": \"D43f5y0ahjqew82jZ4NViEr2YafMKhue\", \"scope\": \"identify\" } Having the user's access token allows your application to make certain requests to the API on their behalf, restricted to whatever scopes were requested. expires_in is how long, in seconds, until the returned access token expires, allowing you to anticipate the expiration and refresh the token. To refresh, make another POST request to the token URL with the following parameters: grant_type - must be set to refresh_token refresh_token - the user's refresh token Refresh Token Exchange Example Copyimport requests API_ENDPOINT = 'https://discord.com/api/v10' CLIENT_ID = '332269999912132097' CLIENT_SECRET = '937it3ow87i4ery69876wqire' def refresh_token(refresh_token): data = { 'grant_type': 'refresh_token', 'refresh_token': refresh_token } headers = { 'Content-Type': 'application/x-www-form-urlencoded' } r = requests.post('%s/oauth2/token' % API_ENDPOINT, data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET)) r.raise_for_status() return r.json() Boom; fresh access token response! Token Revocation Example To disable an access or refresh token, you can revoke it by making a POST request to the token revocation URL with the following parameters: token - the access token or refresh token to revoke token_type_hint (optional) - the token parameter's type—either access_token or refresh_token When you revoke a token, any active access or refresh tokens associated with that authorization will be revoked, regardless of the token and token_type_hint values you pass in. Copyimport requests API_ENDPOINT = 'https://discord.com/api/v10' CLIENT_ID = '332269999912132097' CLIENT_SECRET = '937it3ow87i4ery69876wqire' def revoke_access_token(access_token): data = { 'token': access_token, 'token_type_hint': 'access_token' } headers = { 'Content-Type': 'application/x-www-form-urlencoded' } requests.post('%s/oauth2/token/revoke' % API_ENDPOINT, data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET)) Boom; the tokens are safely revoked. Implicit Grant The implicit OAuth2 grant is a simplified flow optimized for in-browser clients. Instead of issuing the client an authorization code to be exchanged for an access token, the client is directly issued an access token. The URL is formatted as follows: Authorization URL Example Copyhttps://discord.com/oauth2/authorize?response_type=token&client_id=290926444748734499&state=15773059ghq9183habn&scope=identify On redirect, your redirect URI will contain additional URI fragments: access_token, token_type, expires_in, scope, and state(if specified). These are not querystring parameters. Be mindful of the \"#\" character: Redirect URL Example Copyhttps://findingfakeurlsisprettyhard.tv/#access_token=RTfP0OK99U3kbRtHOoKLmJbOn45PjL&token_type=Bearer&expires_in=604800&scope=identify&state=15773059ghq9183habn There are tradeoffs in using the implicit grant flow. It is both quicker and easier to implement, but rather than exchanging a code and getting a token returned in a secure HTTP body, the access token is returned in the URI fragment, which makes it possibly exposed to unauthorized parties. You also are not returned a refresh token, so the user must explicitly re-authorize once their token expires. Client Credentials Grant The client credential flow is a quick and easy way for bot developers to get their own bearer tokens for testing purposes. By making a POST request to the token URL with a grant type of client_credentials, using Basic authentication with your client id as the username and your client secret as the password, you will be returned an access token for the bot owner. Therefore, always be super-extra-very-we-are-not-kidding-like-really-be-secure-make-sure-your-info-is-not-in-your-source-code careful with your client_id and client_secret. We don't take kindly to imposters around these parts. You can specify scopes with the scope parameter, which is a list of OAuth2 scopes separated by spaces: Team applications are limited to the identify and applications.commands.update scope, because teams are not bound to a specific user. Client Credentials Token Request Example Copyimport requests API_ENDPOINT = 'https://discord.com/api/v10' CLIENT_ID = '332269999912132097' CLIENT_SECRET = '937it3ow87i4ery69876wqire' def get_token(): data = { 'grant_type': 'client_credentials', 'scope': 'identify connections' } headers = { 'Content-Type': 'application/x-www-form-urlencoded' } r = requests.post('%s/oauth2/token' % API_ENDPOINT, data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET)) r.raise_for_status() return r.json() In return, you will receive an access token (without a refresh token): Client Credentials Access Token Response Copy{ \"access_token\": \"6qrZcUqja7812RVdnEKjpzOL4CvHBFG\", \"token_type\": \"Bearer\", \"expires_in\": 604800, \"scope\": \"identify connections\" } Bot Users Discord's API provides bot users, which are a separate type of user dedicated to automation. Bot users are automatically added to all apps, and are authenticated using the bot token found in your app's settings. Unlike the normal OAuth2 flow, bot users have full access to most API routes without using bearer tokens, and can connect to the Real Time Gateway. Bot vs User Accounts Developers must abide by the terms of service, which includes refraining from automating standard user accounts (generally called \"self-bots\") outside of the OAuth2/bot API. Bot users have a few differences compared to standard Discord users: Bots are added to guilds through the OAuth2 API, and cannot accept normal invites. Bots cannot have friends or be added to or join Group DMs. Verified bots do not have a maximum number of guilds. Bots have an entirely separate set of rate limits. Bot Authorization Flow Bot authorization is a special server-less and callback-less OAuth2 flow that makes it easy for users to add bots to guilds. The URL you create looks similar to what we use for full stack implementation: Bot Auth Parameters namedescriptionclient_idyour app's client idscopeneeds to include bot for the bot flowpermissionsthe permissions you're requestingguild_idpre-fills the dropdown picker with a guild for the userdisable_guild_selecttrue or false—disallows the user from changing the guild dropdown URL Example Copyhttps://discord.com/oauth2/authorize?client_id=157730590492196864&scope=bot&permissions=1 In the case of bots, the scope parameter should be set to bot. There's also a new parameter, permissions, which is an integer corresponding to the permission calculations for the bot. You'll also notice the absence of response_type and redirect_uri. Bot authorization does not require these parameters because there is no need to retrieve the user's access token. When the user navigates to this page, they'll be prompted to add the bot to a guild in which they have proper permissions. On acceptance, the bot will be added. Super easy! If you happen to already know the ID of the guild the user will add your bot to, you can provide this ID in the URL as a guild_id=GUILD_ID parameter. When the authorization page loads, that guild will be preselected in the dialog if that user has permission to add the bot to that guild. You can use this in conjunction with the parameter disable_guild_select=true to disallow the user from picking a different guild. If your bot is super specific to your private clubhouse, or you just don't like sharing, you can leave the Public Bot option unchecked in your application's settings. If unchecked, only you can add the bot to guilds. If marked as public, anyone with your bot's URL can add it to guilds in which they have proper permissions. Advanced Bot Authorization Devs can extend the bot authorization functionality. You can request additional scopes outside of bot and applications.commands, which will prompt a continuation into a complete authorization code grant flow and add the ability to request the user's access token. If you request any scopes outside of bot and applications.commands, response_type is again mandatory; we will also automatically redirect the user to the first URI in your application's registered list unless redirect_uri is specified. When receiving the access code on redirect, there will be additional querystring parameters of guild_id and permissions. The guild_id parameter should only be used as a hint as to the relationship between your bot and a guild. To be sure of the relationship between your bot and the guild, consider requiring the Oauth2 code grant in your bot's settings. Enabling it requires anyone adding your bot to a server to go through a full OAuth2 authorization code grant flow. When you retrieve the user's access token, you'll also receive information about the guild to which your bot was added: Extended Bot Authorization Access Token Example Copy{ \"token_type\": \"Bearer\", \"guild\": { \"mfa_level\": 0, \"emojis\": [], \"application_id\": null, \"name\": \"SomeTest\", \"roles\": [ { \"hoist\": false, \"name\": \"@everyone\", \"mentionable\": false, \"color\": 0, \"position\": 0, \"id\": \"290926798626357250\", \"managed\": false, \"permissions\": 49794241, \"permissions_new\": \"49794241\" } ], \"afk_timeout\": 300, \"system_channel_id\": null, \"widget_channel_id\": null, \"region\": \"us-east\", \"default_message_notifications\": 1, \"explicit_content_filter\": 0, \"splash\": null, \"features\": [], \"afk_channel_id\": null, \"widget_enabled\": false, \"verification_level\": 0, \"owner_id\": \"53908232999183680\", \"id\": \"2909267986347357250\", \"icon\": null, \"description\": null, \"public_updates_channel_id\": null, \"safety_alerts_channel_id\": null, \"rules_channel_id\": null, \"max_members\": 100000, \"vanity_url_code\": null, \"premium_subscription_count\": 0, \"premium_tier\": 0, \"preferred_locale\": \"en-US\", \"system_channel_flags\": 0, \"banner\": null, \"max_presences\": null, \"discovery_splash\": null, \"max_video_channel_users\": 25 }, \"access_token\": \"zMndOe7jFLXGawdlxMOdNvXjjOce5X\", \"scope\": \"bot\", \"expires_in\": 604800, \"refresh_token\": \"mgp8qnvBwJcmadwgCYKyYD5CAzGAX4\" } Two-Factor Authentication Requirement For bots with elevated permissions (permissions with a * next to them), we enforce two-factor authentication on the owner's account when added to guilds that have server-wide 2FA enabled. Webhooks Discord's webhook flow is a specialized version of an authorization code implementation. In this case, the scope querystring parameter needs to be set to webhook.incoming: URL Example Copyhttps://discord.com/oauth2/authorize?response_type=code&client_id=157730590492196864&scope=webhook.incoming&state=15773059ghq9183habn&redirect_uri=https%3A%2F%2Fnicememe.website When the user navigates to this URL, they will be prompted to select a channel in which to allow the webhook. When the webhook is executed, it will post its message into this channel. On acceptance, the user will be redirected to your redirect_uri. The URL will contain the code querystring parameter which should be exchanged for an access token. In return, you will receive a slightly modified token response: Webhook Token Response Example Copy{ \"token_type\": \"Bearer\", \"access_token\": \"GNaVzEtATqdh173tNHEXY9ZYAuhiYxvy\", \"scope\": \"webhook.incoming\", \"expires_in\": 604800, \"refresh_token\": \"PvPL7ELyMDc1836457XCDh1Y8jPbRm\", \"webhook\": { \"application_id\": \"310954232226357250\", \"name\": \"testwebhook\", \"url\": \"https://discord.com/api/webhooks/347114750880120863/kKDdjXa1g9tKNs0-_yOwLyALC9gydEWP6gr9sHabuK1vuofjhQDDnlOclJeRIvYK-pj_\", \"channel_id\": \"345626669224982402\", \"token\": \"kKDdjXa1g9tKNs0-_yOwLyALC9gydEWP6gr9sHabuK1vuofjhQDDnlOclJeRIvYK-pj_\", \"type\": 1, \"avatar\": null, \"guild_id\": \"290926792226357250\", \"id\": \"347114750880120863\" } } From this object, you should store the webhook.token and webhook.id. See the execute webhook documentation for how to send messages with the webhook. Any user that wishes to add your webhook to their channel will need to go through the full OAuth2 flow. A new webhook is created each time, so you will need to save the token and id. If you wish to send a message to all your webhooks, you'll need to iterate over each stored id combination and make POST requests to each one. Be mindful of our Rate Limits! Get Current Bot Application Information GET/oauth2/applications/@me Returns the bot's application object. Get Current Authorization Information GET/oauth2/@me Returns info about the current authorization. Requires authentication with a bearer token. Response Structure FieldTypeDescriptionapplicationpartial application objectthe current applicationscopesarray of stringsthe scopes the user has authorized the application forexpiresISO8601 timestampwhen the access token expiresuser?user objectthe user who has authorized, if the user has authorized with the identify scope Example Authorization Information Copy{ \"application\": { \"id\": \"159799960412356608\", \"name\": \"AIRHORN SOLUTIONS\", \"icon\": \"f03590d3eb764081d154a66340ea7d6d\", \"description\": \"\", \"hook\": true, \"bot_public\": true, \"bot_require_code_grant\": false, \"verify_key\": \"c8cde6a3c8c6e49d86af3191287b3ce255872be1fff6dc285bdb420c06a2c3c8\" }, \"scopes\": [ \"guilds.join\", \"identify\" ], \"expires\": \"2021-01-23T02:33:17.017000+00:00\", \"user\": { \"id\": \"268473310986240001\", \"username\": \"discord\", \"avatar\": \"f749bb0cbeeb26ef21eca719337d20f1\", \"discriminator\": \"0\", \"global_name\": \"Discord\", \"public_flags\": 131072 } }",
    "url": "https://discord.com/developers/docs/topics/oauth2",
    "type": "developer",
    "pageName": "Bot API Reference",
    "scrapedAt": "2025-10-11T14:31:35.016Z"
  },
  {
    "title": "Discord Community Guidelines",
    "content": ".bottom-nav_blur{ background-color: #1C1C1C ; } .bottom-dd_toggle { color:white ; } .bottom-nav { color:white ; } .body-article .bottom_nav_line { background-color:#808081 ; } .body-article .toggle-wrapper { border-color:#808081 ; } .nav_brand_main-logo, .nav_burger_trigger, .nav_dd_arrow-wr-white { display: none; } .nav_brand_main-black-logo, .nav_burger_trigger-black, .nav_dd_arrow-wr-black { display: flex; } .text-category { color: #000; } .article_author_job-2 { color: #000; opacity: 50%; } .body-article.contrast .toggle-light-icon { color: #000; } .article_author-wr, .tags-wr { color: #000; } .text-category_article { color: #00000080; } .article_tag { background-color: #cdcfe5; } .body-article .article_rich-text-2, .body-article .article_rich-text-2 figcaption { color: white; } .body-article.contrast .article_rich-text-2 { color: #000; } .body-article.contrast .toggle-dark-icon { color: white; opacity: 50%; } .body-article .toggle-dark-icon { color: white; } .body-article.contrast .toggle-light-icon { color: white; } .body-article.contrast .nav_dd:focus-within .nav_link, .nav_dd:hover .nav_link { color: white; } .body-article.contrast .toggle-circle { right: 47px; } @media (min-width: 992px) { .body-article.contrast .nav_link, .body-article.contrast .nav_dd_trigger { color: #000; } .body-article.contrast .button-nav { color: white; background-color: black; } .body-article.contrast .nav_dd:has(.nav_dd_trigger.w--open) .nav_link, .body-article.contrast .nav_dd:has(.nav_dd_trigger.w--open) .nav_dd_trigger { color: white; } .body-article.contrast .nav_dd:has(.nav_dd_trigger.w--open) .nav_dd_arrow-wr-white { display: flex; } .body-article.contrast .nav_dd:has(.nav_dd_trigger.w--open) .nav_dd_arrow-wr-black { display: none; } .nav_wrapper.submenu-open .nav_brand_main-logo { display: block; } .nav_wrapper.submenu-open .nav_brand_main-black-logo { display: none; } .nav_wrapper.submenu-open .button-nav { color: black; background-color: white; transition: background-color .05s; } .nav_wrapper.submenu-open .nav_link, .nav_wrapper.submenu-open .nav_dd_trigger { color: white; /* Changing the color for neighboring dropdowns */ } .nav_wrapper.submenu-open .nav_dd_arrow-wr-black { display: none; } .nav_wrapper.submenu-open .nav_dd_arrow-wr-white { display: block; } } .bottom_toc_link:hover { background-color:#323232 ; } .bottom-dd_icon-s { color:white; } .nav_brand_main-black-logo { opacity:1; } .menu-button-login.login-button-js { color: white; background-color: black; } .nav_link:hover { color:white !important; } body { font-smoothing: antialiased; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-rendering: optimizeLegibility; } /*nav styles*/ .nav:has(.nav_dd_trigger.w--open) .nav_blur{ display: block; height:100%; transition: opacity 0.4s; opacity:1; } /* Focus state style for keyboard navigation for the focusable elements */ *[tabindex]:focus-visible, input[type=\"file\"]:focus-visible { outline: 0.125rem solid #fff; outline-offset: 0.125rem; } .nav_blur { display: block; opacity: 0; visibility: hidden; transition: opacity 0.4s, visibility 0.4s; } .nav:has(.nav_dd_trigger.w--open) .nav_blur { opacity: 1; visibility: visible; } .nav:has(.nav_dd_trigger.w--open) .nav_dd_bg{ transform: scaleY(1); } .nav_burger_content .nav_link{ padding-top: 1.5rem; padding-left:0; padding-bottom: 1.5rem; border-bottom: 1px solid #ffffff10; border-radius: 0px; justify-content:left; } .nav_burger_content .nav_dd_trigger { padding-top: 1.5rem; padding-left:0; padding-bottom: 1.5rem; border-bottom: none; justify-content:space-between; flex-grow:1; } .nav_burger_content .nav_dd { border-bottom: 1px solid #ffffff10; border-radius: 0px; } .nav_menu.is-burger::-webkit-scrollbar { width: 0px; height: 10px; } .nav_dd_link-group:last-child { border:0px; } .dd_nav-link:hover .nav_dd_link_arrow{ transform: translate(2px, -2px); } @media screen and (max-width: 340px) and (min-width: 240px) { .nav_brand { width: 7.45rem; } } DownloadNitroDiscoverSafety ResourcesFamily CenterSafety LibrarySafety NewsTeen CharterHubsParent HubPolicy HubPrivacy HubTransparency HubWellbeing HubQuests ResourcesAdvertisingSuccess StoriesQuests FAQ ResourcesFeedbackSubmit a RequestBlog CollectionsFeaturedCommunityDiscord HQEngineering & DevelopersHow to DiscordPolicy & SafetyProduct & FeaturesDevelopers FeaturedDiscord Social SDKApps and ActivitiesDocumentationDeveloper Developer Documentation Developer Applications Developer  CareersLog InLog In DownloadNitroDiscoverSafety SafetyResourcesFamily CenterSafety LibrarySafety NewsTeen CharterHubsParent HubPolicy HubPrivacy HubTransparency HubWellbeing HubQuests QuestsResourcesAdvertisingSuccess StoriesQuests FAQ ResourcesFeedbackSubmit a RequestBlog BlogCollectionsFeaturedCommunityDiscord HQEngineering & DevelopersHow to DiscordPolicy & SafetyProduct & FeaturesDevelopers DevelopersFeaturedGDC 2025Discord Social SDKApps and ActivitiesDocumentationDeveloper Developer Documentation Developer Applications Developer  CareersLog InDownload for LinuxArchived VersionsDiscord Community GuidelinesEffective: September 29, 2025Last Updated: August 29, 20251. 2. 3. • • • 4. 5. • • • 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. ‍Discord enables you to build meaningful connections around the joy of playing games through voice, video and text features. Our Community Guidelines ensure everyone can express themselves and find community — but not at the expense of anyone else.These Guidelines are incorporated into our Terms of Service, and further explain what isn’t allowed on Discord so that we can help create a positive environment for everyone. Everyone on Discord must follow these rules, and they apply to all parts of our platform, including your content, behaviors, servers, and apps. To learn more about the requirements for developing a bot or other app on Discord, please refer to our Discord Developer Terms of Service and our Discord Developer Policy.If you plan to monetize your content, please review the additional rules outlined in our Monetization Policy and Monetization Terms.Our Trust & Safety team reviews reports by users, moderators, trusted third-party partners, or where required by law. When we proactively or reactively discover a violation of these Guidelines, we may take a number of enforcement steps based on the severity of the violation, including issuing warnings, removing content, temporarily suspending account access to Discord, or permanently removing violative accounts and servers, and even reporting them to law enforcement. We may also consider relevant off-platform behavior when making assessments for violations of specific Community Guidelines.If you come across an account, server, or content that appears to break these Guidelines, please report it to us.Respect Each Other1. Do not promote, coordinate, or engage in harassment. We do not allow any type of harassing behavior, including sexual harassment, ban or block evasion, or coordinating server joins for the purpose of harassing server members, also referred to as “server raiding.\" (See our Bullying, Harassment, and Threats Policy Explainer for more.)2. Do not threaten to harm another individual or group of people. This includes direct, indirect, and suggestive threats. (See our Bullying, Harassment, and Threats Policy Explainer for more.)3. Do not share or threaten to share the personally identifiable information (PII) of an individual without consent. This includes providing services that facilitate doxxing, such as buying or selling doxxes or compiling doxxes for others. (See our Doxxing Policy Explainer for more.)4. Do not use hate speech or engage in other hateful conduct. This includes the use of hate symbols, imagery, and claims that deny the history of mass human atrocities.We consider hate speech to be any form of expression that either attacks other people or promotes hatred or violence against them based on their protected characteristics. (See our Hateful Conduct Policy Explainer for more.)5. Do not organize, promote, or support violent extremism. This also includes coordinating violent acts; glorifying or promoting violence or the perpetrators of violent acts; and promoting conspiracy theories that could encourage or incite violence against others. (See our Violent Extremism and Violence and Graphic Content Policy Explainers for more.)6. Do not create, post, solicit, share, or make attempts to distribute content on Discord that depicts, promotes, or attempts to normalize child sexual abuse. This includes manipulated, non-manipulated, or synthetic (artificial intelligence-generated) media involving real, fictional, and/or anthropomorphized children.This also includes animation, drawing, text, and technical commands or prompts to create media depicting child sexual abuse or child sexualization.We report child sexual abuse material (CSAM) and grooming to the National Center for Missing & Exploited Children, which may subsequently work with local law enforcement. (See our Teen and Child Safety Policy Explainer for more.)7. If you are under the age of 18, you may not engage in sexual conduct or any other conduct using Discord that puts your online or physical safety at risk. This includes consensual sexual interactions between you and other teens of a similar age, as well as any encouragement or coordination of behavior that may be harmful for you or others, such as vigilantism.We want teens to be able to express themselves as authentically as possible on Discord. However, given the risks associated with online dating, we will remove spaces that encourage or facilitate dating between teens. (See our Teen and Child Safety Policy Explainer and our Teen Safety Assist function for more.)8. Do not engage in any sexual conduct with anyone under the age of 18. This includes soliciting, sharing, or exchanging sexual content. We report child sexual abuse material (CSAM) and grooming to the National Center for Missing & Exploited Children, which may subsequently work with local law enforcement. (See our Teen and Child Safety Policy Explainer for more.)9. Do not make sexually explicit content available to anyone under the age of 18. Discord users must be aged 18 or older to view, gain access to, or participate in adult sexual content on Discord.Server owners must apply an age-restricted label to any channels that contain sexually explicit content involving adults or content involving adults that is shared solely for the purposes of sexual gratification.Users may not post sexually explicit content in any space that cannot be age-restricted, including in avatars, custom statuses or bios, server banners, server icons, invite splashes, emoji, and stickers. (See our Sexual Content Policy Explainer for more.)10. Do not share, distribute, or create sexually explicit or sexually suggestive content of other people over the age of 18 without the subject’s explicit consent. This includes the non-consensual distribution of intimate media that was created either with or without an individual’s consent. (See our Non-Consensual Adult Intimate Media Policy Explainer for more.)11. Do not share content that glorifies, promotes, or normalizes suicide or other acts of physical self-harm. This includes content that encourages others to cut, burn, or starve themselves, as well as content that normalizes eating disorders, such as anorexia and bulimia. Self-harm acts or threats used as a form of emotional manipulation or coercion are also prohibited. (See our Suicide and Self-Harm Policy Explainer for more.)‍12. Do not upload or share any material depicting violence, gore, or animal cruelty, especially with the intention to harass or shock others. (See our Violence and Graphic Content Policy Explainer for more.)Respect Discord13. Do not send unsolicited bulk messages (or spam) to others. Also, do not facilitate this activity, such as by selling spambots, server “raid” tools, account-creation tools, token generators, CAPTCHA-solving services, or other spam tools. (See our Platform Manipulation Policy Explainer for more.)14. Do not use self-bots or user-bots. Each account must be associated with a human, not a bot. (See our Platform Manipulation Policy Explainer for more.)15. Do not engage with our service in an inauthentic way. This includes artificially inflating server membership, manipulating engagement metrics, and selling artificial engagement services. (See our Platform Manipulation Policy Explainer for more.)16. Do not sell or purchase Discord assets, including accounts, usernames, servers, server permissions, or custom server invite links. (See our Platform Manipulation Policy Explainer for more.)17. Do not share false or misleading information (otherwise known as misinformation). Content that is false, misleading, and can lead to significant risk of physical or societal harm may not be shared on Discord. We may remove content if we reasonably believe its spread could result in damage to physical infrastructure, injury of others, obstruction of participation in civic processes, or the endangerment of public health. (See our Misinformation Policy Explainer for more.)18. Do not misrepresent your identity on Discord in a deceptive or harmful way. This includes creating fake profiles and attempts to impersonate an individual, group, or organization. (See our Identity and Authenticity Policy Explainer for more.)19. Do not evade permanent Discord-level enforcement actions. This includes creating new or using existing accounts or communities after being removed for violating our platform rules. (See our Identity and Authenticity Policy Explainer for more.)20. Do not engage in activities that could damage or compromise the security of an account, network, or system. This includes using deceptive techniques to trick others into revealing sensitive information (phishing), using malicious software (malware), and flooding a target with traffic in order to make a resource unavailable (denial-of-service attacks). (See our Deceptive Practices Policy Explainer for more.)21. Do not use or attempt to use Discord to promote, coordinate, or execute financial scams. A financial scam is any intentionally deceptive act taken with the intent to receive an illegal, unethical, or otherwise dishonest gain. (See our Deceptive Practices Policy Explainer for more.)22. Do not engage in activities that fraudulently generate a profit at the expense of others. This includes facilitating, providing instructions for, and participating in fraud. We do not allow coordinated efforts to defraud businesses, price gouging, forgery, money laundering, counterfeit goods, or tools that facilitate illegal behavior. (See our Deceptive Practices Policy Explainer for more.)23. Do not submit false, misleading, or abusive reports or requests to Discord’s support teams. A report or request will be considered false or misleading if it contains demonstrably untrue information submitted with the intent to manipulate staff into taking a desired action. (See our Discord  Abuse Policy Explainer for more.)Follow Applicable LawsAs described in our Terms of Service, you must comply with all applicable laws, rules, and regulations. This includes:24. Do not share content that violates anyone's intellectual property or other rights. This includes sharing or selling game cheats or hacks. (See our Unauthorized Copyright Access Policy for more.)For more information on how Discord handles copyright complaints, please view our Copyright & Intellectual Property Policy.25. Do not organize, promote, or engage in the selling or facilitation of sales of regulated or potentially dangerous goods. Regulated goods have laws in place that restrict the purchase, sale, trade, or ownership of the goods. Dangerous goods have a reasonable potential to cause real-world, physical harm to individuals. (See our Dangerous and Regulated Goods Policy Explainer for more.)26. Do not coordinate or participate in illegal gambling. Users are responsible for complying with applicable gambling laws and regulation. (See our Gambling Policy Explainer for more.)27. Do not organize, promote, or engage in any illegal activity that harms the dignity, safety, or wellbeing of another person. This includes but is not limited to human trafficking and sexual solicitation. (See our Human Trafficking and Sexual Solicitation Policy Explainers for more.)If you see any content or activity that violates these Guidelines, our Terms of Service, or any of our other policies, please report it to us. You can learn more on how to report to us here. However, please note that we strongly discourage and may take action against vigilantism, as this behavior can put individuals in harm’s way and can also interfere with our investigations and ability to report to law enforcement.These Guidelines will continue to evolve over time. This means we may take action against an account, server, or content that violates the spirit of these Guidelines when we encounter a new threat or harm that is not explicitly covered in the current version.We will always make our best effort to notify you when we update these Guidelines, but it is up to you to follow them and to use Discord responsibly: Keep Discord safe and help us ensure it remains a great place to build friendships around the joy of playing games. Thanks for doing your part.‍LanguageEnglishČeštinaDanskDeutschEnglishEnglish (UK)EspañolEspañol (América Latina)FrançaisHrvatskiItalianolietuvių kalbaMagyarNederlandsNorskPolskiPortuguês (Brasil)RomânăSuomiSvenskaTiếng ViệtTürkçeΕλληνικάбългарскиРусскийУкраїнськаहिंदीไทย한국어中文中文(繁體)日本語SocialProductDownloadNitroStatusApp DirectoryCompanyAboutJobsBrandNewsroomResourcesCollegeSafetyBlogStreamKitCreatorsCommunityDevelopersQuestsOfficial 3rd Party MerchFeedbackPoliciesTermsPrivacyCookie SettingsGuidelinesAcknowledgementsLicensesCompany InformationSocial $('.menu-button').on('click', function() { $('body').toggleClass('modal-open'); }); <!-- endbuild --> window.dataLayer = window.dataLayer || []; window.dataLayer.push({ 'allCookiesOK': false }); (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=GI0g9O-54_SitcgmxQKxlA&gtm_preview=env-2&gtm_cookies_win=x'; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-N7BVC2W'); { \"@context\": \"https://schema.org/\", \"@type\": \"BreadcrumbList\", \"itemListElement\": [{ \"@type\": \"ListItem\", \"position\": 1, \"name\": \"Discord\", \"item\": \"https://discord.com/\" },{ \"@type\": \"ListItem\", \"position\": 2, \"name\": \"Discord Community Guidelines\", \"item\": \"https://discord.com/guidelines\" }] }",
    "url": "https://discord.com/guidelines",
    "type": "guidelines",
    "pageName": "Community Guidelines",
    "scrapedAt": "2025-10-11T14:31:38.697Z"
  },
  {
    "title": "oops",
    "content": "oops The page you were looking for doesn't exist You may have mistyped the address or the page may have moved Take me back to the home page",
    "url": "https://support.discord.com/hc/en-us/sections/360000045712",
    "type": "support-section",
    "pageName": "Safety & Privacy",
    "scrapedAt": "2025-10-11T14:31:41.197Z"
  }
]
